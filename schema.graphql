type Door @aws_api_key @aws_iam {
	open: Boolean!
	last_updated: AWSDateTime!
}

type Temperature @aws_api_key @aws_iam {
	value: Float!
	timestamp: AWSDateTime!
}

type TemperatureConnection @aws_api_key @aws_iam {
	items: [Temperature!]!
	nextToken: String
}

type Badge @aws_api_key @aws_iam {
	id: ID!
	issued_at: AWSDateTime!
	returned_at: AWSDateTime
	last_updated: AWSDateTime!
	use_count: Int!
}

type BadgeConnection @aws_api_key @aws_iam {
	items: [Badge!]!
	nextToken: String
}

type Subscription @aws_api_key @aws_iam {
	door: Door
	@aws_subscribe(mutations: ["updateDoor"])
	temperature: Temperature
	@aws_subscribe(mutations: ["registerTemperature"])
	badge: Badge
	@aws_subscribe(mutations: ["updateBadge"])
}

type Mutation @aws_iam {
	updateDoor(open: Boolean!): Door!
	registerTemperature(value: Float!): Temperature!
	updateBadge(id: ID, return_badge: Boolean, increment_uses: Boolean): Badge!
	invalidate: String
}

type Query @aws_api_key @aws_iam {
	temperatures(nextToken: String): TemperatureConnection!
	door: Door!
	badges(onlyActive: Boolean!, nextToken: String): BadgeConnection!
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
